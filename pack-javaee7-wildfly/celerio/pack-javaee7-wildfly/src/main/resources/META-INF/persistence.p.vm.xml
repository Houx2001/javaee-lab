$output.resource("META-INF", "persistence.xml")##
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
			 version="2.1">
	<persistence-unit name="${configuration.applicationName}PU" transaction-type="JTA">

		<description><![CDATA[
			If you are running in a production environment, add a managed
			data source, this example data source is just for development and testing.

			Dev datasource is here: src/main/config/wildfly/${configuration.applicationName}-ds.xml
			(see pom.xml, it gets copied to the right place during build time)
			]]></description>

		<jta-data-source>java:jboss/datasources/${configuration.applicationName}DS</jta-data-source>
#foreach ($entity in $project.withoutManyToManyJoinEntities.list)
#if(!$entity.isVirtual())
		<class>${entity.model.fullType}</class>
#end
#end

		<properties>
			<!-- script related -->
			<property name="hibernate.hbm2ddl.import_files_sql_extractor" value="org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor" />
			<property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
			<property name="javax.persistence.schema-generation.drop-source" value="script"/>
			<property name="javax.persistence.schema-generation.create-source" value="script"/>
			<property name="javax.persistence.schema-generation.drop-script-source" value="01-drop.sql"/>
			<property name="javax.persistence.schema-generation.create-script-source" value="02-create.sql"/>
			<property name="javax.persistence.sql-load-script-source" value="03-import.sql"/>

			<!-- Hibernate -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
			<property name="hibernate.show_sql" value="@hibernate.show.sql@" />
			<property name="hibernate.format_sql" value="@hibernate.format.sql@" />
			<property name="hibernate.generate_statistics" value="@hibernate.generate_statistics@" />
			<property name="hibernate.use_sql_comments" value="@hibernate.use_sql_comments@" />

			<!-- please uncomment if needed (not used by H2) -->
			<property name="hibernate.default_schema" value="" />

			<!-- see https://hibernate.atlassian.net/browse/HHH-9106, wondering if it is really that bad -->
			<property name="hibernate.event.merge.entity_copy_observer" value="allow"/>

			<!-- 2d level Cache with EHcache -->
			<property name="hibernate.cache.use_query_cache" value="@hibernate.use.query.cache@"/>
			<property name="hibernate.cache.use_second_level_cache" value="@hibernate.use.second.level.cache@"/>
			<property name="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
			<property name="net.sf.ehcache.configurationResourceName" value="@hibernate.ehcache.configuration.file@"/>

			<property name="hibernate.integration.envers.enabled" value="false" />
			<property name="hibernate.envers.autoRegisterListeners" value="false" />
#if($project.search.isNotEmpty())

			<!-- Hibernate Search -->
			<property name="hibernate.search.model_mapping" value="${Search.packageName}.SearchMappingFactory" />
			<property name="hibernate.search.default.directory_provider" value="ram" />
			
			<!-- Hibernate Search bug fix by wildfly -->
			<property name="wildfly.jpa.hibernate.search.module" value="org.hibernate.search.orm:main"/> 
#end
#if($project.isAuditLogPresent())
			<!-- not tested yet-->
			<!--<property name="hibernate.ejb.event.post-delete" value="${Audit.packageName}.AuditLogListener" />-->
			<!--<property name="hibernate.ejb.event.post-insert" value="${Audit.packageName}.AuditLogListener"/>-->
			<!--<property name="hibernate.ejb.event.pre-update" value="${Audit.packageName}.AuditLogListener"/>-->
#end
		</properties>
	</persistence-unit>
</persistence>
